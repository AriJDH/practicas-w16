-- MySQL Script generated by MySQL Workbench
-- Wed Aug 24 17:20:43 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `biblioteca` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `biblioteca` DEFAULT CHARACTER SET utf8 ;
USE `biblioteca` ;

-- -----------------------------------------------------
-- Table `mydb`.`Libro`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblioteca`.`Libro` (
  `idLibro` INT NOT NULL AUTO_INCREMENT,
  `Titulo` VARCHAR(45) NOT NULL,
  `Editorial` VARCHAR(45) NOT NULL,
  `Area` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idLibro`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Autor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblioteca`.`Autor` (
  `idAutor` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(45) NOT NULL,
  `Nacionalidad` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idAutor`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`LibroAutor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblioteca`.`LibroAutor` (
  `idAutor` INT NOT NULL,
  `idLibro` INT NOT NULL,
  PRIMARY KEY (`idAutor`, `idLibro`),
  INDEX `fk_Libro_has_Autor_Autor1_idx` (`idLibro` ASC) VISIBLE,
  INDEX `fk_Libro_has_Autor_Libro_idx` (`idAutor` ASC) VISIBLE,
  CONSTRAINT `fk_Libro_has_Autor_Libro`
    FOREIGN KEY (`idAutor`)
    REFERENCES `biblioteca`.`Libro` (`idLibro`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Libro_has_Autor_Autor1`
    FOREIGN KEY (`idLibro`)
    REFERENCES `biblioteca`.`Autor` (`idAutor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Estudiante`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblioteca`.`Estudiante` (
  `idLector` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(45) NOT NULL,
  `Apellido` VARCHAR(45) NOT NULL,
  `Direccion` VARCHAR(45) NOT NULL,
  `Carrera` VARCHAR(45) NOT NULL,
  `Edad` INT NOT NULL,
  PRIMARY KEY (`idLector`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Prestamo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `biblioteca`.`Prestamo` (
  `idLibro` INT NOT NULL,
  `idLector` INT NOT NULL,
  `FechaPrestamo` DATE NOT NULL,
  `FechaDevolucion` DATE NOT NULL,
  `Devuelto` TINYINT NOT NULL,
  PRIMARY KEY (`idLibro`, `idLector`),
  INDEX `fk_Libro_has_Estudiante_Estudiante1_idx` (`idLector` ASC) VISIBLE,
  INDEX `fk_Libro_has_Estudiante_Libro1_idx` (`idLibro` ASC) VISIBLE,
  CONSTRAINT `fk_Libro_has_Estudiante_Libro1`
    FOREIGN KEY (`idLibro`)
    REFERENCES `biblioteca`.`Libro` (`idLibro`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Libro_has_Estudiante_Estudiante1`
    FOREIGN KEY (`idLector`)
    REFERENCES `biblioteca`.`Estudiante` (`idLector`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------

USE biblioteca;

-- -----------------------------------------------------

INSERT INTO Autor VALUES(NULL, "Pedro Casas", "Argentina");
INSERT INTO Autor VALUES(NULL, "Juan Lopez", "Francia");
INSERT INTO Autor VALUES(NULL, "Maria Hernandez", "Italia");
INSERT INTO Autor VALUES(NULL, "Camila Gomez", "Mexico");
INSERT INTO Autor VALUES(NULL, "J.K. Rowling", "Argentina");

INSERT INTO Libro VALUES(NULL, "El señor de los anillos 1", "Salamandra", "Fantasía");
INSERT INTO Libro VALUES(NULL, "Harry Potter 1", "Editorial 2", "Internet");
INSERT INTO Libro VALUES(NULL, "El Universo: Guía de viaje", "Editorial 3", "Base de Datos");
INSERT INTO Libro VALUES(NULL, "Harry Potter 2", "Editorial 2", "Internet");
INSERT INTO Libro VALUES(NULL, "El señor de los anillos 2", "Salamandra", "Base de Datos");

INSERT INTO LibroAutor VALUES(1, 2);
INSERT INTO LibroAutor VALUES(3, 2);
INSERT INTO LibroAutor VALUES(5, 1);
INSERT INTO LibroAutor VALUES(2, 4);
INSERT INTO LibroAutor VALUES(4, 3);

INSERT INTO Estudiante VALUES(NULL, "Andres", "Fernandez", "Direccion 1111", "Administracion", 23);
INSERT INTO Estudiante VALUES(NULL, "Filippo", "Galli", "Direccion 2222", "Contabilidad", 23);
INSERT INTO Estudiante VALUES(NULL, "Federico", "Aragon", "Direccion 3333", "Informatica", 22);
INSERT INTO Estudiante VALUES(NULL, "Maximiliano", "Torrente", "Direccion 4444", "Informatica", 25);
INSERT INTO Estudiante VALUES(NULL, "Josue", "Maidana", "Direccion 5555", "Informatica", 20);

INSERT INTO Prestamo VALUES(1, 2, "2022-05-20", "2022-06-20", true);
INSERT INTO Prestamo VALUES(3, 2, "2021-06-20", "2021-07-16", false);
INSERT INTO Prestamo VALUES(5, 1, "2021-05-30", "2021-07-16", false);
INSERT INTO Prestamo VALUES(2, 4, "2022-03-11", "2022-04-11", true);
INSERT INTO Prestamo VALUES(4, 3, "2022-05-2", "2022-04-12", true);

-- -----------------------------------------------------
-- 1. Listar los datos de los autores.
SELECT * FROM AUTOR;

-- 2. Listar nombre y edad de los estudiantes
SELECT NOMBRE, EDAD FROM ESTUDIANTE;

-- 3. ¿Qué estudiantes pertenecen a la carrera informática?
SELECT * FROM ESTUDIANTE WHERE CARRERA = "Informatica";

-- 4. ¿Qué autores son de nacionalidad francesa o italiana?
SELECT * FROM AUTOR WHERE NACIONALIDAD = "Francia" OR NACIONALIDAD = "Italia";

-- 5. ¿Qué libros no son del área de internet?
SELECT * FROM LIBRO WHERE AREA NOT LIKE "%Internet%";

-- 6. Listar los libros de la editorial Salamandra.
SELECT * FROM LIBRO WHERE EDITORIAL = "Salamandra";

-- 7. Listar los datos de los estudiantes cuya edad es mayor al promedio.
SELECT * FROM ESTUDIANTE WHERE EDAD > (SELECT AVG(EDAD) FROM ESTUDIANTE);

-- 8. Listar los nombres de los estudiantes cuyo apellido comience con la letra G.
SELECT NOMBRE, APELLIDO FROM ESTUDIANTE WHERE APELLIDO LIKE "G%";

-- 9. Listar los autores del libro “El Universo: Guía de viaje”. (Se debe listar solamente los nombres).
SELECT AUTOR.NOMBRE FROM LIBRO
INNER JOIN LIBROAUTOR ON LIBRO.IDLIBRO = LIBROAUTOR.IDLIBRO
INNER JOIN AUTOR ON AUTOR.IDAUTOR = LIBROAUTOR.IDAUTOR
WHERE LIBRO.TITULO = "El Universo: Guía de viaje";

-- 10. ¿Qué libros se prestaron al lector “Filippo Galli”?
SELECT * FROM LIBRO
INNER JOIN PRESTAMO ON LIBRO.IDLIBRO = PRESTAMO.IDLIBRO
INNER JOIN ESTUDIANTE ON PRESTAMO.IDLECTOR = ESTUDIANTE.IDLECTOR
WHERE ESTUDIANTE.NOMBRE = "Filippo" AND ESTUDIANTE.APELLIDO = "Galli";

-- 11. Listar el nombre del estudiante de menor edad.
SELECT NOMBRE FROM ESTUDIANTE WHERE EDAD = (SELECT MIN(EDAD) FROM ESTUDIANTE);

-- 12. Listar nombres de los estudiantes a los que se prestaron libros de Base de Datos.
SELECT ESTUDIANTE.NOMBRE FROM LIBRO
INNER JOIN PRESTAMO ON LIBRO.IDLIBRO = PRESTAMO.IDLIBRO
INNER JOIN ESTUDIANTE ON PRESTAMO.IDLECTOR = ESTUDIANTE.IDLECTOR
WHERE LIBRO.AREA = "Base de Datos";

-- 13. Listar los libros que pertenecen a la autora J.K. Rowling.
SELECT * FROM LIBRO
INNER JOIN LIBROAUTOR ON LIBRO.IDLIBRO = LIBROAUTOR.IDLIBRO
INNER JOIN AUTOR ON AUTOR.IDAUTOR = LIBROAUTOR.IDAUTOR
WHERE AUTOR.NOMBRE = "J.K. Rowling";

-- 14. Listar títulos de los libros que debían devolverse el 16/07/2021.
SELECT TITULO FROM LIBRO
INNER JOIN PRESTAMO ON LIBRO.IDLIBRO = PRESTAMO.IDLIBRO
WHERE FECHADEVOLUCION = "2021-07-16";
